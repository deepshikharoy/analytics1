#vectors----
x=1:10    #create seq of nos 1 to 10
x
x1 <- 1:20
x1
(x1=1:30)
(x2=c(1,2,13,4,5))
class(x2)
(x3=letters[1:10])
class(x3)
LETTERS[1:26]
(x3b = c('a', "Dhiraj","4"))
class(x3)
(x4=c(T,FALSE,TRUE,T,F))
class(x4)
LETTERS[seq(1,26,2)]
#access element
(x6 = seq(0,100,by=3))
ls() #variable in my env
x6
length(x6)
x6[20]
length(x6)
x6[20]
x6[3]  # access 3rd element
#[1] 4
x6[c(2, 4)]     # access 2nd and 4th element
x6[-1]          # access all but 1st element
x6[-c(1:10, 15:20)]
x6[c(2, -4)]
x6[20]
x6[3]
x6[c(2, 4)]
x6[-1]
(x7 = c(x6, x2))
sort(x6)
sort(x6[-c(1,2)])
set.seed(123)
x[2] <- 10; x        # modify 2nd element
(x = -3:2)
x[2] <- 10; x        # modify 2nd element
#[1] -3  0 -1  0  1  2
#delete vector
(x = seq(1,5, length.out = 15))
#[1] 1.000 1.444 1.889 2.333 2.778 3.222 3.667 4.111 4.556 5.000
x = NULL
(m1 = matrix(100:111, nrow=4))
(m2 = matrix(100:111, ncol=3, byrow=T))
dim(m1)
m1
x=101:124
length(x)
m3=matrix(x, ncol=6)
class(m3)
attributes(m3)
dim(m3)
m1[1,]
m1[c(1,3)]
paste("C",1:100,sep="-")
(colnames(m1) = paste('C',1:3, sep=''))
(rownames(m1) = paste('R',1:4, sep=''))
paste("C","D",sep="-")
paste("C",1:100,sep="-")
addmargins(m1,margin=1,sum) #colwise function
addmargins(m1,1,sd) #colwise function
addmargins(m1,margin=1,sum) #colwise function
round(addmargins(m1,1,sd),2) #colwise function
addmargins(m1,c(1,2),list(list(mean,sum,max), list(var,sd))) #row & col wise function
addmargins(m1,margin=1,sum) #colwise function
#DataFrame----
#create Vectors to be combined into DF
(rollno = 1:30)
(sname = paste('student',1:30,sep=''))
(gender = sample(c('M','F'), size=30, replace=T, prob=c(.7,.3)))
(marks = floor(rnorm(30,mean= 50,sd=10)))
(marks2 = ceiling(rnorm(30,40,5)))
(course = sample(c('BBA','MBA'), size=30, replace=T, prob=c(.5,.5)))
rollno; sname; gender
#create DF
df1= data.frame(rollno, sname, gender, marks, marks2, course, stringsAsFactors = F)
str(df1) #structure of DF
head(df1) #top 6 rows
head(df1,n=3) #top 3 rows
tail(df1) #last 6 rows
class(df1) # DF
summary(df1) #summary
df1$gender = factor(df1$gender)
df1$course = factor(df1$course)
str(df1)
(rollno = 1:30)
(sname = paste('student',1:30,sep=''))
(rollno = 1:30)
(sname = paste('student',1:30,sep=''))
(gender = sample(c('M','F'), size=30, replace=T, prob=c(.7,.3)))
(rollno = 1:30)
(sname = paste('student',1:30,sep=''))
(gender = sample(c('M','F'), size=30, replace=T, prob=c(.7,.3)))
(marks = floor(rnorm(30,mean= 50,sd=10)))
(gender = sample(c('m','f'),size=30,replace=T, prob=c(.7, .3)))
table(gender)
prop.table(table(gender))
(course = sample(c('BBA','MBA','btech'), size=30, replace=T, prob=c(.4,.1,.5)))
(gender = sample(c('M','F'), size=1000, replace=T, prob=c(.7,.3)))
(gender = sample(c('m','f'),size=30,replace=T, prob=c(.7, .3)))
table(gender)
floor(3.4)
floor(3.7)
ceiling(3.4)
trunc(3.4)
round(3.6)
round(3.6,2)
plot(density(x))
signifi(5.67564,3)
signif(5.67564,3)
head(df1) #top 6 rows
str(df1) #structure of DF
#create DF
df1= data.frame(rollno, sname, gender, marks, marks2, course, stringsAsFactors = F)
head(df1,n=3) #top 3 rows
class(df1) # DF
tail(df1) #last 6 rows
summery(x)
summery(x)
quantile(x)
summery(x)
summery(x)
boxplot(x)
quantile(x,seq(0,1,.1))
abline(h=fivenum(x))
df1$gender = factor(df1$gender)
df1$course = factor(df1$course)
summary(df1)
df1$gender = factor(df1$gender)
df1$course = factor(df1$course)
str(df1)
summary(df1)
summary(df1) #summary
df1$gender = factor(df1$gender)
df1$course = factor(df1$course)
str(df1)
summary(df1)
str(df1)
df1[ , c(2,4)] #multiple columns
df1[1:10 ,] #select rows, all columns
df1[ marks > 50 & gender=='F', c(1,2)]
df1[ marks > 50 | gender=='F', ]
df1[ marks > 50 & gender=='F', c(1,2)]
df1[ marks > 50 | gender=='F', ]
df1[ marks > 50 & gender=='F', c('rollno', 'sname','gender', 'marks')]
df1[ marks > 50 & gender=='F', c(1,2)]
df1[ marks > 50 | gender=='F', ]
df1[ marks > 50 & gender=='F', c('rollno', 'sname','gender', 'marks')]
df1[ marks > 50 & gender=='F', c('rollno', 'sname','gender', 'marks')]
df1[ marks > 50 & gender=='F', c(1,2)]
names(df1)  # names of columns
names(df1)  # names of columns
dim(df1)  #Dimensions
library(dplyr)
install.packages("dplyr")
#as per conditionis
df1[ marks > 50 & gender=='F', c('rollno', 'sname','gender', 'marks')]
df1[ marks > 50 & gender=='F', c('rollno', 'sname','gender', 'marks')]
df1  #full data
df1$gender  # one column
df1[ , c(2,4)] #multiple columns
df1[1:10 ,] #select rows, all columns
#as per conditionis
df1[ marks > 50 & gender=='F', c('rollno', 'sname','gender', 'marks')]
library(dplyr)
df1 %>% group_by(gender)
df1 %>% group_by(gender) %>% summarise(mean(marks), mean(marks2))
df1 %>% group_by(course, gender)  %>% summarise(mean(marks), mean(marks2))
df1 %>% gruop_by(course, gender)  %>% count
df1 %>% group_by(gender)  %>% summarise(max(marks), min(marks2))
arrange(mtcars, desc(disp))
# grouped arrange ignores groups
by_cyl <- mtcars %>% group_by(cyl)
by_cyl %>% arrange(desc(wt))
# Unless you specifically ask:
by_cyl %>% arrange(desc(wt), .by_group = TRUE)
# asssign---
x1 = 3
x2 <- 3
#Print Value
x1
x2
x2
x2 <- 3
x2 <- 3
#Print Value
x1
x2
#Print Value
x1
x2
#Assign and Print
(x3=3)
#Discrete Cat Data
(attend = c('A','P','P','A','P','A'))
table(attend)
cbind(table(attend))  # A & P on left side
color=c('Blue','Green','Magenta','Green','Black','Blue','Black')
(x2 = table(color))
(x2a = cbind(x2))
hist(x2a)  # not relevant
barplot(x2a)  # not good
barplot(x2a, beside=T)  # Better
unique(color) ; length(unique(color))
barplot(x2a, beside=T, col=rainbow(length(unique(color))))
pie(x2a)
#Discrete Cat Data
(attend = c('A','P','P','A','P','A'))
#Discrete Cat Data
(attend = c('r','P','P','A','P','A'))
table(attend)
barplot(x2a, beside=T, col=rainbow(length(unique(color))))
barplot(x2a, beside=T, col=unique(color),names.arg = names(x2))
(x2 = table(color))
(x2a = cbind(x2))
hist(x2a)  # not relevant
barplot(x2a)  # not good
barplot(x2a, beside=T)  # Better
unique(color) ; length(unique(color))
barplot(x2a, beside=T, col=rainbow(length(unique(color))))
barplot(x2a, beside=T, col=sort(unique(color)), names.arg=names(x2)
color=c('blue','green','blue','magenta','blue','green', 'magenta','black','blue','black')
color=c('blue','green','blue','magenta','blue','green', 'magenta','black','blue','black')
#Continuous Data
set.seed(1234)
x3 = runif(100,0,150)  # 0 to 150 marks range, 100 values
x3
# Divide range into step of 15 ie 10 levels
breaks = seq(0,150,by=15)
breaks
length(breaks)
#x3[1] = 60; x3[2] = 75
x3.cut = cut(x3, breaks)
x3.cut
table(x3.cut)
cbind(table(x3.cut))  #see it vertically
#give intervals a character values a, b..
(x3.cut = cut(x3, breaks, labels=letters[1:10]))
hist(x3,break=15,col=1:15)
#plot these freq Table: which is better
hist(x3b)
color=c('blue','green','blue','magenta','blue','green', 'magenta','black','blue','black')
(x2 = table(color))
(x2a = cbind(x2))
hist(x2a)  # not relevant
barplot(x2a)  # not good
barplot(x2a, beside=T)  # Better
unique(color) ; length(unique(color))
barplot(x2a, beside=T, col=rainbow(length(unique(color))))
barplot(x2a, beside=T, col=sort(unique(color)), names.arg=names(x2))
pie(x2a)
#Continuous Data
set.seed(1234)
x3 = runif(100,0,150)  # 0 to 150 marks range, 100 values
x3
x3 = ceiling(x3)  #round to higher value
x3 = ceiling(x3)  #round to higher value
x3
range(x3)
# Divide range into step of 15 ie 10 levels
breaks = seq(0,150,by=15)
breaks
length(breaks)
x3
#x3[1] = 60; x3[2] = 75
x3.cut = cut(x3, breaks)
x3.cut
table(x3.cut)
cbind(table(x3.cut))  #see it vertically
#give intervals a character values a, b..
(x3.cut = cut(x3, breaks, labels=letters[1:10]))
#(x3.cut = cut(x3, breaks, labels=letters[1:length(breaks)-1]))
x3.cut
(x3a = table(x3.cut))
#my self
x = rnorm(5)
plot(x)
> age <- c(1,3,5,2,11,9,3,9,12,3)
age <- c(1,3,5,2,11,9,3,9,12,3)
weight <- c(4.4,5.3,7.2,5.2,8.5,7.3,6.0,10.4,10.2,6.1)
mean(weight)
sd(weight)
cor(age,weight)
plot(age,weight)
q()
(p1 = predict( fit1,newdata=new ))
cbind(new,p1)
#plot
women
file.exists("./data/mtcars.csv")
x = rnorm(5)
plot(x)
age <- c(1,3,5,2,11,9,3,9,12,3)
weight <- c(4.4,5.3,7.2,5.2,8.5,7.3,6.0,10.4,10.2,6.1)
mean(weight)
sd(weight)
cor(age,weight)
plot(age,weight)
setwd("E:/analytics1")
setwd()
getwd()
options()
options(digits=3)
x <- runif(20)
summary(x)
x <- runif(20)
summary(x)
hist(x)
source(all 2.R)
source(data)
source(first.R)
first.R
test1.r
source("first.R")
names(source("first.R"))
sink('data2')
sink('data.txt')
source(file 1.R)
source('file 1.R')
source('file = 1.R')
sink("sink-examp.txt")
i <- 1:10
outer(i, i, "*")
sink()
unlink("sink-examp.txt")
## Not run:
## capture all the output to a file.
zz <- file("all.Rout", open="wt")
sink(zz)
sink(zz, type="message")
try(log("a"))
## back to the console
sink(type="message")
sink()
try(log("a"))
lm(mpg~wt,data=mtcars)
mtcars
fit1=lm(mpg~wt,data=mtcars)
library(dployr)
library(dplyr)
lm(mpg~wt,data=mtcars)
lm(mpg~wt,data=mtcars)
data(mtcars)
mtcars
#structure of data set
str(mtcars)
#analysis of dataset mtcars using dplyr
#filename : dplyr-mtcars.R
#learn to use dployr for mtcars data set
library(dplyr)
#analysis of dataset mtcars using dplyr
#filename : dplyr-mtcars.R
#learn to use dployr for mtcars data set
library(dplyr)
?mtcars
#structure of data set
str(mtcars)
dim(mtcars)
names(mtcars) #colum names
rownames(mtcars)
#analysis of dataset mtcars using dplyr
#filename : dplyr-mtcars.R
#learn to use dployr for mtcars data set
library(dplyr)
?mtcars
#structure of data set
str(mtcars)
dim(mtcars)
names(mtcars) #colum names
rownames(mtcars)
summary(mtcars)  #summery of data set
#summary activities on mtcars
t1= table(mtcars$am)
pie(t1)
19/32*360
pie(t1, labels=c('auto','manual'))
t2=table(mtcars$gear)
pie(t2)
barplot(t2)
barplot(t2, col=1:3, horiz=T)
pie(t1, labels=c('low','high'))
barplot(t2, col=c('green','blue','yellow'))
barplot(t2, col=c('green','blue','yellow') , xlab='gear' , ylab='no of cars' , ylim=c(0,20))
title(main = 'distribution of gears of cars', sub = 'no of gears')
#using dplyr %>% is chaining function
mtcars %>%  select(mpg,gear) %>% slice(c(1:5, 10))
#select for colums, slice for row
mtcars %>% arrange(mpg) #ascending order of mileage
mtcars %>% arrange(am, desc(mpg)) %>% select(am, mpg) #ascending order of mpg
mtcars %>%mutate(rn= rownames(mtcars)) %>% select(rn,mpg)
#display rowname with mpg
mtcars %>% sample_n(3)
mtcars %>%  sample_frac(.2)
mtcars %>% select(sample(x=c(1:11),size=2))
mtcars %>% mutate(newmpg = mpg*1.1)
mutate(mtcars, newmpg = mpg*1.2)
#type of tx, mean(mpg)
mtcars %>%  group_by(am) %>%summarise(meanmpg = mean(mpg))
mtcars %>%  group_by(am) %>% summarise(Meanmpg = mean(mpg), maxhp =max(hp), minwt= min(wt))
mtcars %>% group_by(gear, cyl) %>% summarise(meanmpg = mean(mpg))
#analysis of dataset mtcars using dplyr
#filename : dplyr-mtcars.R
#learn to use dployr for mtcars data set
library(dplyr)
#structure of data set
str(mtcars)
data=mtcars
#structure of data set
str(mtcars)
#analysis of dataset mtcars using dplyr
#filename : dplyr-mtcars.R
#learn to use dployr for mtcars data set
library(dplyr)
tail(mtcars)
attach(mtcars)
attach('mtcars')
tail('mtcars')
tail('mtcars',5)
mtcars
?mtcars
women
mtcars
library(mtcars)
print(women)
print(mtcars)
iris
plot(women)
?iris
print(mtcars)
#structure of data set
str(mtcars)
a <- c(1, 2, 5, 3, 6, -2, 4)
b <- c("one", "two", "three")
c <- c(TRUE, TRUE, TRUE, FALSE, TRUE, FALSE)
library(mtcars)
library(dplyr)
mtcars
(gender = sample(c('m','f'),size=30,replace=T, prob=c(.7, .3)))
table(gender)
prop.table(table(gender)
summery(x)
prop.table(table(gender))
summery(x)
summary(x)
summary(x)
(x=rnorm(100, mean=60, sd=10))
plot(x)
boxplot(x)
source('E:/rwork/rprojects/analytics1/file4.R', echo=TRUE)
summery(x) #summery of x
summary(x) #summery of x
quantile(x) #quantile
quantile(x,seq(0,1,.1))
quantile(x,seq(0,1, .1))
eq(0, 1, length.out = 11)
seq(0, 1, length.out = 11)
seq(5: 10, 1 )
seq(1: 10, 1 )
seq(1: 10, 1 )
seq(1 : 9, 1 )
seq(1 : 9, by=1 )
seq(1,6, by = 3)
seq(1,9, by=1 )
seq(1,9, by=2 )
str(omni)
#3rd Method : from gsheet
library(gsheet)
omni3 = as.data.frame(gsheet::gsheet2tbl(url))
head(omni)
#Omni Store
omni1
#creating data using Vector
sales= c(4141,3842,3056,3519,4226, 4630,3507,3754, 5000,5120,4011, 5015,1916,675, 3636,3224,2295, 2730,2618,4421, 4113,3746, 3532, 3825,1096, 761,2088,820,2114, 1882,2159,1602,3354,2927)
price = c(59,59,59,59,59,59,59,59,59,59,59,59, 79,79,79,79,79,79,79,79,79, 79,79,79,99,99, 99,99,99,99,99,99,99,99)
promotion= c(200,200,200,200,400,400,400,400, 600,600,600,600,200,200,200,200, 400,400,400,400,600,600,600,600, 200,200,200,200,400,400,400,400,600,600)
#Create a DF from 3 variables
omni1 = data.frame(sales,price,promotion)
head(omni1)
#MLR  Create Multiple Linear Regression
# we want to see how Sales Qty depend on Price and Promotion Values
fit2 = lm(sales ~ price + promotion, data=omni)
#MLR  Create Multiple Linear Regression
# we want to see how Sales Qty depend on Price and Promotion Values
fit2 = lm(sales ~ price + promotion, data=omni1)
# summary statistics of model IMP STEP
summary(fit2)
#understand values : R2, AdjR2, Fstats pvalue, Coeff, ***, Residuals
#F Stats pvalue = 2.86e-10 < 0.05 : Model Exists
#At least 1 IV can be used to predict sales
names(summary(fit2))
summary(fit1)$adj.r.squared  # Adjt R2 here > .6
summary(fit2)$adj.r.squared  # Adjt R2 here > .6
# summary statistics of model IMP STEP
summary(fit2)
summary(residuals(fit2))
summary(fit2)$adj.r.squared  # Adjt R2 here > .6
#coefficients b1, b2
coef(fit2)
fitted(fit2)
omni$sales
omni1$sales
#create a dataframe of new sample values
(ndata2 = data.frame(price=c(60,70), promotion=c(300,400)))
p2sales = predict(fit2, newdata=ndata2)
cbind(ndata2, p2sales)
#Assumptions
par(mfrow=c(2,2))
plot(fit2)
